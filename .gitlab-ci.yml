image: openjdk:13-slim

before_script:
#  - apk add --no-cache make git
  - apt-get update && apt-get install -y make curl git jq
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - chmod +x gradlew

cache:
  key: "${CI_BUILD_REF_NAME}"
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - .gradle/build-cache

stages:
#  - compile
  - package
  - unit test
  - quality
  # - publish
  - build images
  - CD pipeline

#assemble:
#  stage: compile
#  script:
#    - make core-clean-assemble
#  artifacts:
#    paths:
##      - .gradle
#      - build/
#      - application/**/build/
#      - domain/**/build/
#      - infrastructure/**/build/
#      - shared/**/build/
#  allow_failure: false
#  tags:
#    - java

unit-test:
  stage: unit test
  dependencies:
    - package
  script:
    - make core-test
  artifacts:
    paths:
#      - .gradle
      - build/
      - application/**/build/
      - domain/**/build/
      - infrastructure/**/build/
      - shared/**/build/
  allow_failure: false
  tags:
    - java

package:
  stage: package
  only:
    - master
    - develop
    - /^[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]$/
  script:
    - make core-clean-package
  artifacts:
    paths:
      - application/signup/build/
  allow_failure: false
  tags:
    - java

code-analysis:
  stage: quality
  image: ciricihq/gitlab-sonar-scanner
  variables:
    SONAR_URL: https://ci.tricefal.io/sonar
    SONAR_ANALYSIS_MODE: publish
    SONAR_TOKEN: f1843a5c58e6658ed82e95e169868d014e1d04b1
  only:
    - master
    - develop
    - /^[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]$/
  script:
    - gitlab-sonar-scanner
  artifacts:
    paths:
      #      - .gradle
      - build/
      - application/**/build/
      - domain/**/build/
      - infrastructure/**/build/
      - shared/**/build/
  dependencies:
    - unit-test
  when: on_success

#sonarqube-check:
#  stage: quality
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - sonar-scanner -Dsonar.qualitygate.wait=true
#  allow_failure: true
#  only:
#    - master
#    - develop
#  dependencies:
#    - unit-test
#  when: on_success

build-image:
  image: docker:19.03.12
  stage: build images
  services:
    - name: docker:19.03.12-dind
      command: ["--insecure-registry=registry.gitlab.com"]
  variables:
    DOCKER_DRIVER: overlay2
    VERSION: v1.0.0
    ENV: local
  before_script:
    - apk add --no-cache make git
    - apk add --no-cache docker-compose
    - docker info
    - docker-compose --version
    - VERSION=$(git describe --always)
    - echo $VERSION $ENV
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -f ./docker-compose.yml pull
    - docker-compose -f ./docker-compose.yml build
    - docker-compose -f ./docker-compose.yml push
  only:
    - master
    - develop
    - /^[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]$/
  dependencies:
    - code-analysis
  tags:
    - image

cd_pipeline:
  stage: CD pipeline
  variables:
    MAIN_PROJECT_ID: 18283923
  script:
    - curl -s -X POST -F token=$CI_JOB_TOKEN -F ref=develop -F "variables[TRIGGERER_PIPELINE_ID]=${CI_PIPELINE_ID}" https://gitlab.com/api/v4/projects/${MAIN_PROJECT_ID}/trigger/pipeline | tee res.json
    - cat res.json
  artifacts:
    paths:
      - build/
      - application/**/build/
      - domain/**/build/
      - infrastructure/**/build/
      - shared/**/build/
      - res.json
  only:
    - master
    - develop
    - /^[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]$/
  dependencies:
    - build-image

after_script:
  - echo "End CI"